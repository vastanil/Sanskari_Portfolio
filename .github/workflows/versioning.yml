name: Auto Semantic Versioning

on:
  push:
    branches:
      - master
      - develop

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to get all tags

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Determine Version and Tag
        run: |
          set -e

          BRANCH="${GITHUB_REF##*/}"
          echo "üß† Branch: $BRANCH"

          # Get latest semantic version tag
          LATEST_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi

          echo "üîñ Latest tag: $LATEST_TAG"
          VERSION="${LATEST_TAG#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Ensure numeric format
          MAJOR=$((10#$MAJOR))
          MINOR=$((10#$MINOR))
          PATCH=$((10#$PATCH))

          echo "Parsed version: MAJOR=$MAJOR MINOR=$MINOR PATCH=$PATCH"

          # Handle branch-specific rules
          if [[ "$BRANCH" == "develop" ]]; then
            echo "üì¶ Rule: develop ‚Üí MINOR bump"
            ((MINOR++))
            PATCH=0

          elif [[ "$BRANCH" == "master" ]]; then
            MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE 'Merge pull request #[0-9]+ from .*/(.*)' | sed 's:.*/::')
            echo "üîç Merged branch: $MERGED_BRANCH"

            if [[ "$MERGED_BRANCH" == release_* ]]; then
              echo "üöÄ Rule: release_* ‚Üí MAJOR bump"
              ((MAJOR++))
              MINOR=0
              PATCH=0
            elif [[ "$MERGED_BRANCH" == hotfix_* ]]; then
              echo "ü©π Rule: hotfix_* ‚Üí PATCH bump"
              ((PATCH++))
            else
              echo "‚ö†Ô∏è No matching rule for merged branch. Skipping."
              exit 0
            fi

          else
            echo "‚ö†Ô∏è No versioning rule for branch: $BRANCH"
            exit 0
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "üîñ New tag: $NEW_TAG"

          # Check if tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $NEW_TAG already exists. Skipping."
            exit 0
          fi

          git tag "$NEW_TAG" || { echo "‚ùå Failed to create tag"; exit 1; }
          git push origin "$NEW_TAG" || { echo "‚ùå Failed to push tag"; exit 1; }

          echo "‚úÖ Tag $NEW_TAG created and pushed successfully!"
