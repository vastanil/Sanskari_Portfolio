name: Auto Semantic Versioning

on:
  push:
    branches:
      - master
      - develop

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git identity
        run: |
          git config --global user.name "Anil Doke"
          git config --global user.email "anild@valueaddsofttech.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Determine version bump type and create tag
        run: |
          set -e
          DATE=$(date +%Y%m%d)
          BRANCH="${GITHUB_REF##*/}"

          echo "üß† Working on branch: $BRANCH"

          # Get the latest version tag or default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0-00000000")
          BASE_VERSION=$(echo "$LATEST_TAG" | cut -d'-' -f1)
          echo "üîñ Latest tag: $LATEST_TAG"

          # Strip 'v' and extract MAJOR.MINOR.PATCH
          VERSION=$(echo "$BASE_VERSION" | sed 's/^v//')
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)

          # Determine the bump type
          if [[ "$BRANCH" == "develop" ]]; then
            echo "üì¶ Rule: Push to develop ‚Üí MINOR bump"
            ((MINOR++))
            PATCH=0
          elif [[ "$BRANCH" == "main" ]]; then
            # Detect merged branch name
            MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE 'Merge pull request #[0-9]+ from .*/(.*)' | awk '{print $NF}')
            echo "üîç Detected merged branch: $MERGED_BRANCH"

            if [[ "$MERGED_BRANCH" == release_* ]]; then
              echo "üöÄ Rule: release_* merged into main ‚Üí MAJOR bump"
              ((MAJOR++))
              MINOR=0
              PATCH=0
            elif [[ "$MERGED_BRANCH" == hotfix_* ]]; then
              echo "ü©π Rule: hotfix_* merged into main ‚Üí PATCH bump"
              ((PATCH++))
            else
              echo "‚ùå No matching rule for merged branch: $MERGED_BRANCH"
              exit 0
            fi
          else
            echo "‚ùå No rule matched for branch: $BRANCH"
            exit 0
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH-$DATE"
          echo "üÜï New tag: $NEW_TAG"

          # Check if tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $NEW_TAG already exists. Skipping."
            exit 0
          fi

          echo "üè∑Ô∏è Creating and pushing tag..."
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

          echo "‚úÖ Tag $NEW_TAG pushed successfully!"
