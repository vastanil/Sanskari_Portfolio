name: Auto Semantic Versioning

on:
  push:
    branches:
      - develop
      - master

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Anil Doke"
          git config --global user.email "anild@valueaddsofttech.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Semantic Versioning Logic
        run: |
          set -e
          set -x

          BRANCH="${GITHUB_REF##*/}"
          echo "üß† Branch: $BRANCH"

          # Get latest version tag across all branches
          LATEST_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "üîñ Latest tag: $LATEST_TAG"

          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)

          # Ensure numeric values
          MAJOR=$((MAJOR + 0))
          MINOR=$((MINOR + 0))
          PATCH=$((PATCH + 0))

          if [[ "$BRANCH" == "develop" ]]; then
            echo "üì¶ Rule: develop ‚Üí MINOR bump"
            ((++MINOR))
            PATCH=0

          elif [[ "$BRANCH" == "master" ]]; then
            MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE 'Merge pull request #[0-9]+ from .*/(.*)' | awk '{print $NF}')
            echo "üîç Merged branch: $MERGED_BRANCH"

            if [[ "$MERGED_BRANCH" == release_* ]]; then
              echo "üöÄ Rule: release_* ‚Üí MAJOR bump"
              ((++MAJOR))
              MINOR=0
              PATCH=0

            elif [[ "$MERGED_BRANCH" == hotfix_* ]]; then
              echo "ü©π Rule: hotfix_* ‚Üí PATCH bump"
              ((++PATCH))
            else
              echo "‚ö†Ô∏è No matching rule for merged branch. Skipping."
              exit 0
            fi

          else
            echo "‚ö†Ô∏è No versioning rule for branch: $BRANCH"
            exit 0
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "üÜï New tag to create: $NEW_TAG"

          # Prevent duplicate tag
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $NEW_TAG already exists. Skipping."
            exit 0
          fi

          git tag "$NEW_TAG" || { echo "‚ùå Failed to create tag"; exit 1; }
          git push origin "$NEW_TAG" || { echo "‚ùå Failed to push tag"; exit 1; }

          echo "‚úÖ Tag $NEW_TAG created and pushed!"
